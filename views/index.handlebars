<div class="container-fluid">
    <div class="row">
        <div class="col-md-3">
            <h1 class="logo"><i class="logo-smog">Smog</i><i class="logo-free">Free</i> </br> <i class="logo-bike">Bike</i></h1>
        </div>
        <!--<div class="col-md-3">-->
            <!--Wyszukiwarka-->
        <!--</div>-->
        <!--<div class="col-md-3">-->
            <!--O nas-->
        <!--</div>-->
        <!--<div class="col-md-3">-->
            <!--Kontakt-->
        <!--</div>-->

    </div>
    <!--<div class="form-group">-->
        <div class="row">
            <div class="col-md-6">
                <label>From:</label><input type="text" id="from-point" class="form-control" value="Marino, Wrocław">
            </div>

            <div class="col-md-6">
                <label>To:</label><input type="text" id="to-point" class="form-control" value="Plac Grunwaldzki, Wrocław">
            </div>
        </div>

        <div class="row">
            <div class="col-md-5">
                <label>Max AQI:</label><input type="number" id="max-aqi" class="form-control" value=80>
            </div>

            <div class="col-md-3 find-button-wrapper">
                <button id="find-button" class="btn btn-success" onclick="getSearchingCoordinates()">
                    Find <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
                </button>
            </div>
        </div>
    <!--</div>-->
    <!--<br>-->
    <label id="warningLabel"></label>
    <div id="map"></div>

    <div class="hidden-layer">
        <label>top</label><input type="text" id="top">
        <label>right</label><input type="text" id="right"><br>
        <label>bottom</label><input type="text" id="bottom">
        <label>left</label><input type="text" id="left">
        <div>
            <ul id="stations"></ul>
        </div>
    </div>
</div>
<script type="text/javascript">
    var view = new ol.View({
        center: ol.proj.fromLonLat([17, 51]),
        zoom: 10
    });
    var raster = new ol.layer.Tile({
        source: new ol.source.OSM()
    });

    var warningText = "Uwaga, AQI powyżej 150 jest niebezpieczne dla zdrowia!"
    var aqi = 80;
    var stationsList2 = []; // stacje potrzebne do wyliczania wspolczynnika jakosci trasy
    var iconFeatures = [];
    var stationFeatures = [];
    var smogFeatures = [];
    var routeFeatures = [];
    var labelFeatures = [];

    var locationSource = new ol.source.Vector({
        features: iconFeatures //add an array of features
    });

    var smogSource = new ol.source.Vector({
        features: smogFeatures //add an array of features
    });

    var stationsSource = new ol.source.Vector({
        features: stationFeatures //add an array of features
    });

    var routesSource = new ol.source.Vector({
        features: routeFeatures
    });

    var labelsSource = new ol.source.Vector({
        features: labelFeatures
    });

    var locationStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(255, 255, 0, 0.8)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(0, 0, 0, 0.9)',
            width: 2
        })
    });

    var stationStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(0, 0, 0, 0.8)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(0, 0, 0, 0.8)',
            width: 2
        }),
        image: new ol.style.Circle({
            radius: 3,
            fill: new ol.style.Fill({
                color: 'rgba(0, 0, 0, 0.8)'
            })
        })
    });

    var lowSmogStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(0, 255, 0, 0.4)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(0, 255, 0, 0.8)',
            width: 2
        }),
    });

    var mediumSmogStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(255,180,0, 0.4)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(255,180,0, 0.8)',
            width: 2
        }),
    });

    var dangerousSmogStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(255, 0, 0, 0.5)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(255, 0, 0, 0.9)',
            width: 2
        })
    });

    var lethalSmogStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(128, 0, 0, 0.5)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(0, 0, 0, 0.7)',
            width: 2,
            lineCap: 'square',
            lineDash: [7, 4, 7],
            lineDashOffset: 10
        })
    });

    var routesStyle = new ol.style.Style({
        stroke: new ol.style.Stroke({
            width: 6,
            color: [140, 40, 40, 0.8]
        })
    });


    function smogStyleFunction(feature, resolution) {
        var rank = feature.get('rank');
        if (+rank < 50) {
            return [lowSmogStyle];
        }
        if (+rank > 200) {
            return [lethalSmogStyle];
        }
        if (+rank > aqi) {
            return [dangerousSmogStyle];
        }
        return [mediumSmogStyle];
    }
    var locationLayer = new ol.layer.Vector({
        source: locationSource,
        style: locationStyle
    });

    var stationsLayer = new ol.layer.Vector({
        source: stationsSource,
        style: stationStyle
    });

    var smogLayer = new ol.layer.Vector({
        source: smogSource,
        style: smogStyleFunction
    });

    var routesLayer = new ol.layer.Vector({
        source: routesSource,
        style: routesStyle
    });

    function display(id, value) {
        document.getElementById(id).value = value.toFixed(2);
    }

    function wrapLon(value) {
        var worlds = Math.floor((value + 180) / 360);
        return value - (worlds * 360);
    }

    function getLocForAddress(address) {
        return $.ajax({
            type: "GET",
            contentType: "application/json",
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: "http://nominatim.openstreetmap.org/search?format=json&q=" + address,
            dataType: 'json'
        })
    }

    var fromAddress;
    var toAddress;

    function getSearchingCoordinates() {
        fromAddress = document.getElementById("from-point").value;
        toAddress = document.getElementById("to-point").value;
        aqi = document.getElementById("max-aqi").value;
        wLabel = document.getElementById('warningLabel');
        if (aqi > 150) {
            wLabel.innerHTML = warningText;
        } else {
            wLabel.innerHTML = '';
        }

        if (!fromAddress || !toAddress) {
            return 1;
        }
        $.when(getLocForAddress(fromAddress), getLocForAddress(toAddress))
                .then(function (resp1, resp2) {
                    var min_lon = parseFloat(Math.min(resp1[0][0].lon, resp2[0][0].lon));
                    var max_lon = parseFloat(Math.max(resp1[0][0].lon, resp2[0][0].lon));
                    var min_lat = parseFloat(Math.min(resp1[0][0].lat, resp2[0][0].lat));
                    var max_lat = parseFloat(Math.max(resp1[0][0].lat, resp2[0][0].lat));

                    var coords = [resp1[0][0].lon, resp1[0][0].lat, resp2[0][0].lon, resp2[0][0].lat];
                    var style = new ol.style.Style({
                        stroke: new ol.style.Stroke({
                            width: 6,
                            color: [40, 140, 40, 0.8]
                        })
                    });
                    drawStartAndFinish(resp1[0][0].lon,
                            resp1[0][0].lat,
                            resp2[0][0].lon,
                            resp2[0][0].lat);
                    drawRoutes(resp1[0][0].lon,
                            resp1[0][0].lat,
                            resp2[0][0].lon,
                            resp2[0][0].lat,
                            style
                    );

                    console.log(coords);
                    var min_xy = ol.proj.fromLonLat([min_lon, min_lat]);
                    var max_xy = ol.proj.fromLonLat([max_lon, max_lat]);
                    view.fit(min_xy.concat(max_xy), {
                        duration: 500,
                        padding: [15, 15, 15, 15]
                    });
                    routesSource.clear();
                    console.log("COUNT STATIONS: ");
                    console.log(stationsList2);
                    $.ajax({
                        type: "GET",
                        contentType: "application/json",
                        url: "http://localhost:3000/mapquest/routes",
                        data: {'coords': coords},
                        success: function (data) {
                            console.log("Wysłano start i koniec.");
                            console.log(data);
                            // rysowanie 1. trasy
                            var style = new ol.style.Style({
                                stroke: new ol.style.Stroke({
                                    width: 6,
                                    color: [40, 140, 40, 0.8]
                                })
                            });
                            console.log("hello" + stationsList2.length);
                            var grade = rateRoute(data.route, stationsList2);
                            console.log("Grade: " + grade);
                            var routeStyle = selectStyle(grade);
                            drawRoute(data.route, routeStyle);
                            var middle_lat = data.route[data.route.length / 2];
                            var middle_lon = data.route[data.route.length / 2 + 1];
                            drawLabel(middle_lat, middle_lon, grade);
                        },
                        dataType: 'json'
                    });
                });
    }

    function selectStyle(grade) {
        var color = "";
        if (grade >= 201) {
            color = '#FF0000';
        }
        if (grade >= 151 && grade < 200) {
            color = '#FF7F00';
        }
        if (grade >= 101 && grade < 150) {
            color = '#FFFF00';
        }
        if (grade >= 51 && grade < 100) {
            color = '#77AA00';
        }
        if (grade <= 50) {
            color = '#00FF00';
        }
        console.log("color: " + color);
        return new ol.style.Style({
            stroke: new ol.style.Stroke({
                width: 6,
                color: color
            })
        });

    }

    function rateRoute(routes, stations) {
        var distances = new Array(stations.length);
        for (s = 0; s < stations.length; s++) {
            distances[s] = 100000;
            var nearest_p_idx = 0;
            for (p = 0; p < routes.length - 1; p += 2) {
                var lat = routes[p];
                var lon = routes[p + 1];
                var stat = stations[s];
                var dist = 1 / Math.pow(Math.sqrt(Math.pow(stat["lat"] - lat, 2) + Math.pow(stat["lon"] - lon, 2)), 2);
                if (dist < distances[s]) {
                    distances[s] = dist;
                    nearest_p_idx = p;
                }
            }
        }
        sum = 0.0;
        sumWeights = 0.0;
        for (s = 0; s < stations.length; s++) {
            if (!isNaN(parseInt(stations[s]["aqi"]))) {
                console.log(distances[s] + "\t\t" + stations[s]["aqi"]);
                sum += parseInt(stations[s]["aqi"]) * distances[s];
                sumWeights += distances[s];
            }
        }
        return sum / sumWeights;
    }

    function drawLabel(middle_lat, middle_lon, grade) {
        var iconFeature = new ol.Feature({
            geometry: new ol.geom.Point(ol.proj.transform([0.0488567 - 0.003, -0.02275 + 0.00115], 'EPSG:4326', 'EPSG:3857')),
            label: "adsfasdf",
            name: 'Null Island',
            population: 4000,
            rainfall: 500,

        });
    }

    function onMoveEnd(evt) {
        var map = evt.map;
        var extent = map.getView().calculateExtent(map.getSize());
        var bottomLeft = ol.proj.transform(ol.extent.getBottomLeft(extent),
                'EPSG:3857', 'EPSG:4326');
        var topRight = ol.proj.transform(ol.extent.getTopRight(extent),
                'EPSG:3857', 'EPSG:4326');
        display('left', wrapLon(bottomLeft[0]));
        display('bottom', bottomLeft[1]);
        display('right', wrapLon(topRight[0]));
        display('top', topRight[1]);

        var coords = [];
        coords.push(bottomLeft[1]);
        coords.push(wrapLon(bottomLeft[0]));
        coords.push(topRight[1]);
        coords.push(wrapLon(topRight[0]));

        $.ajax({
            type: "GET",
            contentType: "application/json",
            url: "http://localhost:3000/aqi/stations",
            data: {'coords': coords},
            //data: {'coords' : 'hallo!'},
            success: function (data) {
                var ul_stations = document.getElementById('stations');
                while (ul_stations.firstChild) {
                    ul_stations.removeChild(ul_stations.firstChild);
                }
                for (var i = 0; i < data["stations"].length; i++) {
                    // TODO: tutaj dodać markery na mapie dla stacji
                    var item = document.createElement('li');
                    var station = JSON.stringify(data["stations"][i]);
                    item.appendChild(document.createTextNode(station));
                    ul_stations.appendChild(item);
                }
                console.log("Settings stations: ");
                console.log(data);
                stationsList2 = data["stations"];
                drawStations(data);

            },
            dataType: 'json'
        });
    }


    function drawStations(stationsData) {

        stationsSource.clear();
        smogSource.clear();

        for (var i = 0; i < stationsData["stations"].length; i++) {
            // TODO: tutaj dodać markery na mapie dla stacji

            var lonStation = stationsData["stations"][i]["lon"];
            var latStation = stationsData["stations"][i]["lat"];
            var rank = stationsData["stations"][i]["aqi"];

            var stat = new ol.geom.Circle(ol.proj.transform([+lonStation, +latStation], 'EPSG:4326', 'EPSG:3857'), 70)
            var stationcr = ol.geom.Polygon.fromCircle(stat);
            var station = new ol.Feature({
                geometry: stationcr
            });

            var sm = new ol.geom.Circle(ol.proj.transform([+lonStation, +latStation], 'EPSG:4326', 'EPSG:3857'), 2500)
            var smogcr = ol.geom.Polygon.fromCircle(sm);
            var smog = new ol.Feature({
                geometry: smogcr
            });
            smogSource.addFeature(smog);
            console.log("rank: " + rank);
            smog.set('rank', rank)
            stationsSource.addFeature(station);
        }
    }

    function drawStartAndFinish(lon1, lat1, lon2, lat2) {
        var cr1 = new ol.geom.Circle(ol.proj.transform([+lon1, +lat1], 'EPSG:4326', 'EPSG:3857'), 100)
        var start = ol.geom.Polygon.fromCircle(cr1);
        var ico1 = new ol.Feature({
            geometry: start
        });

        var cr2 = new ol.geom.Circle(ol.proj.transform([+lon2, +lat2], 'EPSG:4326', 'EPSG:3857'), 100)
        var stop = ol.geom.Polygon.fromCircle(cr2);
        var ico2 = new ol.Feature({
            geometry: stop
        });
        locationSource.clear();
        locationSource.addFeature(ico1);
        locationSource.addFeature(ico2);

    }

    function drawRoute(shapePoints, style) {
        for (i = 0; i + 3 < shapePoints.length; i += 2) {
            drawRoutes(shapePoints[i],
                    shapePoints[i + 1],
                    shapePoints[i + 2],
                    shapePoints[i + 3],
                    style
            );
        }
    }
    function drawRoutes(lat1, lon1, lat2, lon2, style) {
        var start = ol.proj.transform([+lon1, +lat1], 'EPSG:4326', 'EPSG:3857');
        var end = ol.proj.transform([+lon2, +lat2], 'EPSG:4326', 'EPSG:3857');
        var icon = new ol.Feature({
            geometry: new ol.geom.LineString([start, end]),
        });
        icon.setStyle(style);
        routesSource.addFeature(icon);
    }

    var map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM()
            }),
            smogLayer
            , stationsLayer
            , routesLayer
            , locationLayer

        ]
        , view: view
    });

    map.on('moveend', onMoveEnd);

</script>