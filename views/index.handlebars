<h1>BajkDojadę</h1>
<label>From:</label><input type="text" id="from-point" value="Wrocław">
<label>To:</label><input type="text" id="to-point" value="Radom">
<button id="find-button" onclick="getSearchingCoordinates()">Find</button>
<div id="map"></div>
<label>top</label><input type="text" id="top">
<label>right</label><input type="text" id="right"><br>
<label>bottom</label><input type="text" id="bottom">
<label>left</label><input type="text" id="left">
<div>
    <ul id="stations"></ul>
</div>
<script type="text/javascript">
    var view = new ol.View({
        center: ol.proj.fromLonLat([17, 51]),
        zoom: 10
    });
    var raster = new ol.layer.Tile({
        source: new ol.source.OSM()
    });

    var iconFeatures=[];
    var stationFeatures=[];
    var smogFeatures=[];
    var routeFeatures = [];

    var locationSource = new ol.source.Vector({
        features: iconFeatures //add an array of features
    });

    var smogSource = new ol.source.Vector({
        features: smogFeatures //add an array of features
    });

    var stationsSource = new ol.source.Vector({
        features: stationFeatures //add an array of features
    });

    var routesSource = new ol.source.Vector({
        features: routeFeatures
    });

    var locationStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(255, 255, 0, 0.8)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(0, 0, 0, 0.9)',
            width: 2
        })
    });

    var stationStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(0, 0, 0, 0.8)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(0, 0, 0, 0.8)',
            width: 2
        }),
        image: new ol.style.Circle({
            radius: 3,
            fill: new ol.style.Fill({
                color: 'rgba(0, 0, 0, 0.8)'
            })
        })
    });

    var lowSmogStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(0, 255, 0, 0.4)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(0, 255, 0, 0.8)',
            width: 2
        }),
    });

    var mediumSmogStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(255,180,0, 0.4)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(255,180,0, 0.8)',
            width: 2
        }),
    });

    var dangerousSmogStyle = new ol.style.Style({
        fill: new ol.style.Fill({
            color: 'rgba(255, 0, 0, 0.5)'
        }),
        stroke: new ol.style.Stroke({
            color: 'rgba(255, 0, 0, 0.9)',
            width: 2
        })
    });

    var routesStyle = new ol.style.Style({
        stroke: new ol.style.Stroke({
            width: 6,
            color: [140, 40, 40, 0.8]
        })
    });


    function smogStyleFunction(feature, resolution){
        var rank = feature.get('rank')
        if(+rank < 55){
            return [lowSmogStyle];
        } else if(+rank > 60) {
            return [dangerousSmogStyle];
        }
        return [mediumSmogStyle];
    }
    var locationLayer = new ol.layer.Vector({
        source: locationSource,
        style: locationStyle
    });

    var stationsLayer = new ol.layer.Vector({
        source: stationsSource,
        style: stationStyle
    });

    var smogLayer = new ol.layer.Vector({
        source: smogSource,
        style: smogStyleFunction
    });

    var routesLayer = new ol.layer.Vector({
        source: routesSource,
        style: routesStyle
    });

    function display(id, value) {
        document.getElementById(id).value = value.toFixed(2);
    }

    function wrapLon(value) {
        var worlds = Math.floor((value + 180) / 360);
        return value - (worlds * 360);
    }

    function getLocForAddress(address){
        return $.ajax({
            type: "GET",
            contentType: "application/json",
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: "http://nominatim.openstreetmap.org/search?format=json&q=" + address,
            dataType: 'json'
        })
    }

    var fromAddress;
    var toAddress;

    function getSearchingCoordinates() {
        fromAddress = document.getElementById("from-point").value;
        toAddress = document.getElementById("to-point").value;

        if(!fromAddress || !toAddress){
            return 1;
        }
        $.when(getLocForAddress(fromAddress),getLocForAddress(toAddress))
                .then(function(resp1, resp2) {
                    var min_lon = parseFloat(Math.min(resp1[0][0].lon, resp2[0][0].lon));
                    var max_lon = parseFloat(Math.max(resp1[0][0].lon, resp2[0][0].lon));
                    var min_lat = parseFloat(Math.min(resp1[0][0].lat, resp2[0][0].lat));
                    var max_lat = parseFloat(Math.max(resp1[0][0].lat, resp2[0][0].lat));

                    var coords = [resp1[0][0].lon, resp1[0][0].lat, resp2[0][0].lon, resp2[0][0].lat];
                    drawStartAndFinish(resp1[0][0].lon,
                            resp1[0][0].lat,
                            resp2[0][0].lon,
                            resp2[0][0].lat);
                    drawRoutes(resp1[0][0].lon,
                            resp1[0][0].lat,
                            resp2[0][0].lon,
                            resp2[0][0].lat);

                    console.log(coords);
                    var min_xy = ol.proj.fromLonLat([min_lon, min_lat]);
                    var max_xy = ol.proj.fromLonLat([max_lon, max_lat]);
                    view.fit(min_xy.concat(max_xy), {
                        duration: 500,
                        padding: [15, 15, 15, 15]
                    });
                    $.ajax({
                        type: "GET",
                        contentType: "application/json",
                        url: "http://localhost:3000/mapquest/routes",
                        data: {'coords': coords},
                        success: function (data) {
                            console.log("Wysłano start i koniec.");
                            console.log(data);
                            drawRoute(data.route);
                        },
                        dataType: 'json'
                    });
        });
    }

    function onMoveEnd(evt) {
        var map = evt.map;
        var extent = map.getView().calculateExtent(map.getSize());
        var bottomLeft = ol.proj.transform(ol.extent.getBottomLeft(extent),
                'EPSG:3857', 'EPSG:4326');
        var topRight = ol.proj.transform(ol.extent.getTopRight(extent),
                'EPSG:3857', 'EPSG:4326');
        display('left', wrapLon(bottomLeft[0]));
        display('bottom', bottomLeft[1]);
        display('right', wrapLon(topRight[0]));
        display('top', topRight[1]);

        var coords = [];
        coords.push(bottomLeft[1]);
        coords.push(wrapLon(bottomLeft[0]));
        coords.push(topRight[1]);
        coords.push(wrapLon(topRight[0]));

        $.ajax({
            type: "GET",
            contentType: "application/json",
            url: "http://localhost:3000/aqi/stations",
            data: {'coords': coords},
            //data: {'coords' : 'hallo!'},
            success: function (data) {
                var ul_stations = document.getElementById('stations');
                while (ul_stations.firstChild) {
                    ul_stations.removeChild(ul_stations.firstChild);
                }
                for (var i = 0; i < data["stations"].length; i++) {
                    // TODO: tutaj dodać markery na mapie dla stacji
                    var item = document.createElement('li');
                    var station = JSON.stringify(data["stations"][i]);
                    item.appendChild(document.createTextNode(station));
                    ul_stations.appendChild(item);
                }
                drawStations(data);
            },
            dataType: 'json'
        });
    }


    function drawStations(stationsData){

        stationsSource.clear();
        smogSource.clear();

        for (var i = 0; i < stationsData["stations"].length; i++) {
            // TODO: tutaj dodać markery na mapie dla stacji

            var lonStation = stationsData["stations"][i]["lon"]
            var latStation = stationsData["stations"][i]["lat"]
            var rank = stationsData["stations"][i]["aqi"]

            var stat = new ol.geom.Circle(ol.proj.transform([+lonStation, +latStation], 'EPSG:4326','EPSG:3857'), 70)
            var stationcr = ol.geom.Polygon.fromCircle(stat);
            var station = new ol.Feature({
                geometry:
                    stationcr
            });

            var sm = new ol.geom.Circle(ol.proj.transform([+lonStation, +latStation], 'EPSG:4326','EPSG:3857'), 3000)
            var smogcr = ol.geom.Polygon.fromCircle(sm);
            var smog = new ol.Feature({
                geometry:
                    smogcr
            });
            smogSource.addFeature(smog);
            smog.set('rank', rank)
            stationsSource.addFeature(station);
        }
    }

    function drawStartAndFinish(lon1, lat1, lon2, lat2) {
        var cr1 = new ol.geom.Circle(ol.proj.transform([+lon1, +lat1], 'EPSG:4326','EPSG:3857'), 150)
        var start = ol.geom.Polygon.fromCircle(cr1);
        var ico1 = new ol.Feature({
            geometry:
                    start
        });

        var cr2 = new ol.geom.Circle(ol.proj.transform([+lon2, +lat2], 'EPSG:4326','EPSG:3857'), 150)
        var stop = ol.geom.Polygon.fromCircle(cr2);
        var ico2 = new ol.Feature({
            geometry:
                    stop
        });
        locationSource.clear();
        locationSource.addFeature(ico1);
        locationSource.addFeature(ico2);

    }

    function drawRoute(shapePoints) {
        routesSource.clear();
        for(i = 0; i + 3 < shapePoints.length;i+=2){
            drawRoutes(shapePoints[i],
                    shapePoints[i+1],
                    shapePoints[i+2],
                    shapePoints[i+3]
            );
        }
    }

    function drawRoutes(lat1, lon1, lat2, lon2){
        var start = ol.proj.transform([+lon1, +lat1], 'EPSG:4326','EPSG:3857');
        var end = ol.proj.transform([+lon2, +lat2], 'EPSG:4326','EPSG:3857');
        var icon = new ol.Feature({
           geometry: new ol.geom.LineString([start,end])
        });
        routesSource.addFeature(icon);
    }

    var map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM()
            }),
            smogLayer
            ,stationsLayer
            ,routesLayer
            ,locationLayer
            
        ]
        , view: view
    });

    map.on('moveend',onMoveEnd);

</script>